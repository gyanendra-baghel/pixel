services:
  zookeeper:
    container_name: vision_zookeeper
    image: confluentinc/cp-zookeeper:7.4.0
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
    healthcheck:
      test: ["CMD", "bash", "-c", "echo ruok | nc localhost 2181 | grep imok"]
      interval: 10s
      timeout: 5s
      retries: 3
    networks:
      - backend

  kafka:
    container_name: vision_kafka
    image: confluentinc/cp-kafka:7.4.0
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
      - "9101:9101"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:9092,PLAINTEXT_HOST://0.0.0.0:29092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
    healthcheck:
      test: ["CMD", "bash", "-c", "kafka-topics --bootstrap-server kafka:9092 --list || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - backend

  postgres:
    container_name: vision_postgres
    image: postgres:15
    restart: always
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
      - POSTGRES_DB=vision_db
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - backend
    ports:
      - "5432:5432"

  qdrant:
    container_name: vision_qdrant
    image: qdrant/qdrant
    ports:
      - "6333:6333"
    environment:
      - QDRANT__STORAGE__STORAGE_PATH=/qdrant/storage
    volumes:
      - qdrant_storage:/qdrant/storage
    networks:
      - backend

  auth-service:
    container_name: vision_auth-service
    build: ./apps/auth-service
    ports:
      - "5001:5001"
    environment:
      - PORT=5001
      - JWT_SECRET=your_jwt_secret
      - NODE_ENV=development
      - DATABASE_URL=postgres://postgres:password@postgres:5432/auth_db
      - FRONTEND_URL=http://localhost:5173
    networks:
      - backend
    depends_on:
      - postgres

  storage-service:
    container_name: vision_storage-service
    build: ./apps/storage-service
    ports:
      - "5002:5002"
    environment:
      - PORT=5002
      - JWT_SECRET=your_jwt_secret
      - NODE_ENV=development
      - DATABASE_URL=postgres://postgres:password@postgres:5432/storage_db
    volumes:
      - image_data:/uploads
    networks:
      - backend
    depends_on:
      - postgres

  gallery-service:
    container_name: vision_gallery-service
    build: ./apps/gallery-service
    environment:
      - PORT=5003
      - JWT_SECRET=your_jwt_secret
      - NODE_ENV=development
      - DATABASE_URL=postgres://postgres:password@postgres:5432/gallery_db
      - KAFKA_BROKER=kafka:9092
      - FRONTEND_URL=http://localhost:5173
    ports:
      - "5003:5003"
    networks:
      - backend
    depends_on:
      - postgres

  email-service:
    container_name: vision_email-service
    build: ./apps/email-service
    environment:
      - PORT=5004
      - JWT_SECRET=your_jwt_secret
      - NODE_ENV=development
      - KAFKA_BROKER=kafka:9092
      - "SMTP_USER=rohansingh91929@gmail.com"
      - "SMTP_PASS=hgxx rxvy kilu riev"
    ports:
      - "5004:5004"
    networks:
      - backend
    depends_on:
      - postgres

  face-service:
    container_name: vision_face-service
    build: ./apps/face-service
    ports:
      - "8010:8010"
    environment:
      - PORT=8010
      - KAFKA_BROKER=kafka:9092
      - QDRANT_HOST=qdrant
      - STORAGE_SERVICE_URL=http://storage-service:5002
      - CAPTION_API=http://gallery-service:5003/api/gallery/images/caption
    depends_on:
      - auth-service
      - storage-service
    networks:
      - backend

  gateway:
    container_name: vision_gateway
    build: ./gateway
    ports:
      - "5000:5000"
    environment:
      - PORT=5000
      - NODE_ENV=development
    networks:
      - backend
    depends_on:
      - auth-service
      - storage-service
      - gallery-service

volumes:
  pgdata:
  image_data:
  qdrant_storage:

networks:
  backend:
